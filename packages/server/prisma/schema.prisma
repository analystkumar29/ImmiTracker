generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  passwordHash      String
  role              UserRole            @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdAppTypes   ApplicationType[]   @relation("CreatedAppTypes")
  applications      Application[]
  createdMilestones MilestoneTemplate[] @relation("CreatedBy")
  notifications     Notification[]
  flaggedAppTypes   ApplicationType[]   @relation("FlaggedAppTypes")
  flaggedMilestones MilestoneTemplate[] @relation("FlaggedMilestones")

  @@map("users")
}

model Application {
  id             String           @id @default(uuid())
  userId         String
  type           String
  subType        String
  country        String
  city           String
  submissionDate DateTime
  currentStatus  String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  appTypeId      String?
  appType        ApplicationType? @relation(fields: [appTypeId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  statusHistory  StatusHistory[]

  @@map("applications")
}

model StatusHistory {
  id            String      @id @default(uuid())
  applicationId String
  statusName    String
  statusDate    DateTime
  notes         String?
  createdAt     DateTime    @default(now())
  milestoneId   String?
  application   Application @relation(fields: [applicationId], references: [id])
  milestone     Milestone?  @relation(fields: [milestoneId], references: [id])

  @@map("status_history")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Milestone {
  id             String             @id @default(uuid())
  name           String
  description    String?
  programType    String
  programSubType String?
  isDefault      Boolean            @default(false)
  order          Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  templateId     String?
  template       MilestoneTemplate? @relation(fields: [templateId], references: [id])
  statusUpdates  StatusHistory[]

  @@index([programType, programSubType])
  @@map("milestones")
}

model MilestoneTemplate {
  id             String              @id @default(uuid())
  name           String
  normalizedName String
  description    String?
  programType    String
  programSubType String?
  isApproved     Boolean             @default(false)
  useCount       Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  createdById    String?
  flagCount      Int                 @default(0)
  isDeprecated   Boolean             @default(false)
  canonicalId    String?
  category       String?             // For grouping similar milestones (medical, biometrics, etc.)
  displayOrder   Int                 @default(0) // For controlling display order in timelines
  createdBy      User?               @relation("CreatedBy", fields: [createdById], references: [id])
  milestones     Milestone[]
  flaggedBy      User[]              @relation("FlaggedMilestones")

  @@index([programType, programSubType])
  @@index([normalizedName])
  @@index([programType])
  @@index([category])
  @@map("milestone_templates")
}

model ApplicationType {
  id             String        @id @default(uuid())
  name           String
  description    String?
  normalizedName String
  category       String
  isDefault      Boolean       @default(false)
  useCount       Int           @default(0)
  flagCount      Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdById    String?
  createdBy      User?         @relation("CreatedAppTypes", fields: [createdById], references: [id])
  applications   Application[]
  flaggedBy      User[]        @relation("FlaggedAppTypes")

  @@unique([normalizedName, category])
  @@index([normalizedName])
  @@index([category])
  @@map("application_types")
}

enum UserRole {
  USER
  ADMIN
}
